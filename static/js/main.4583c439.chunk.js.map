{"version":3,"sources":["components/Geolocate.js","components/BrowseFloristsForm.js","components/FloristCard.js","components/ListFlorists.js","components/NavBar.js","container/FloristListContainer.js","App.js","serviceWorker.js","index.js"],"names":["Geolocate","handleClick","event","preventDefault","props","fetchYelpApi","coords","latitude","longitude","this","isGeolocationAvailable","isGeolocationEnabled","Button","variant","class","src","onClick","React","Component","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","BrowseFloristsForm","state","zipcode","handleSubmit","console","log","onChange","setState","target","name","value","Container","style","paddingTop","display","justifyContent","alignItems","Form","onSubmit","Group","type","className","placeholder","required","FloristCard","CardDeck","margin","Card","Img","florist","image_url","alt","onError","e","onerror","Body","Title","Text","location","address1","city","display_phone","Link","href","url","color","ListFlorists","floristsList","length","map","f","key","id","NavBar","Navbar","height","paddingRight","backgroundColor","Brand","width","Nav","fontWeight","FloristListContainer","args","proxyurl","fetch","method","headers","process","then","resp","json","data","florists","businesses","push","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4583c439.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { geolocated } from \"react-geolocated\";\r\nimport Button from 'react-bootstrap/Button';\r\n \r\nclass Geolocate extends React.Component {\r\n    handleClick = (event) => {\r\n        event.preventDefault()\r\n        this.props.fetchYelpApi(this.props.coords.latitude, this.props.coords.longitude)\r\n    }\r\n\r\n    render() {\r\n        return !this.props.isGeolocationAvailable ? (\r\n            <div>Your browser does not support Geolocation</div>\r\n        ) : !this.props.isGeolocationEnabled ? (\r\n            <div>Geolocation is not enabled</div>\r\n        ) : this.props.coords ? ( \r\n            <Button variant=\"light btn-arrow\"><img class=\"arrow\" src='https://i.imgur.com/c86tlDi.jpg' onClick={ this.handleClick } /></Button> \r\n        ) : (\r\n            <div>Getting the location data&hellip; </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default geolocated({\r\n    positionOptions: {\r\n        enableHighAccuracy: false,\r\n    },\r\n    userDecisionTimeout: 5000,\r\n})(Geolocate);","import React from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Geolocate from '../components/Geolocate'\r\n\r\nclass BrowseFloristsForm extends React.Component {\r\n    state = {\r\n        zipcode: ''\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        console.log(this.state.zipcode)\r\n        event.preventDefault()\r\n        this.props.fetchYelpApi(this.state.zipcode)  \r\n    }\r\n\r\n    //Update state as user enters zipcode in the form:\r\n    onChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n            <Container style={{ paddingTop: '30px'}}><h1>Find a florist near you.</h1></Container>\r\n            <Container style={{ display: \"flex\", justifyContent: \"left\", alignItems: \"center\" }}>\r\n                \r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <Form.Group>                       \r\n                        <input type=\"text\" className=\"border border-dark\" placeholder=\"Browse by zipcode\" name=\"zipcode\" onChange={this.onChange} required />        \r\n                        <Geolocate fetchYelpApi={this.props.fetchYelpApi}/>\r\n                    </Form.Group>  \r\n                    <Button variant=\"warning\" className='btn-md round browse' type=\"submit\" value=\"Browse\">Browse</Button>             \r\n                </Form>\r\n            </Container>\r\n            </>\r\n        )   \r\n    }   \r\n}\r\n\r\nexport default BrowseFloristsForm","import React from 'react'\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst FloristCard = (props) => {\r\n  // console.log(props.florist.image_url);\r\n  return ( \r\n    <CardDeck className=\"col-md-5 col-lg-4\" style={{ margin: \"2em auto\" }}>\r\n      <Card className=\"card\">\r\n      {/* <div key={props.florist.id}> */}\r\n      \r\n        {/* <Card.Img variant=\"top\" className=\"card-img-top\" src={props.florist.image_url} alt={`Florist: ${props.florist.name}`}/> */}\r\n        {/* <img src=\"image.png\" onError=\"this.onerror=null; this.src='/images/noimage.gif';\" /> */}\r\n        {/* src='../public/no-photo.jpg' */}\r\n        <Card.Img variant=\"top\" className=\"card-img-top\" src={props.florist.image_url} alt={`Florist: ${props.florist.name}`} onError={(e)=>{e.target.onerror = null; e.target.src=\"https://i.imgur.com/DtxazjC.jpg\"}}/>\r\n                                                                                                                            \r\n        <Card.Body>\r\n          <Card.Title>{props.florist.name}</Card.Title>\r\n          <Card.Text className='cd-text'>{props.florist.location.address1}</Card.Text>\r\n          <Card.Text className='cd-text'>{props.florist.location.city}, {props.florist.location.state}</Card.Text>\r\n          <Card.Text>{props.florist.display_phone}</Card.Text>\r\n          {/* <Card.Link target=\"_blank\" href={props.florist.url}>Learn more about this florist!</Card.Link>\r\n           */}\r\n\r\n          <Button className=\"align-self-end btn-md round btn-block\" variant=\"warning\" style={{ margin: \"auto\" }}>\r\n            <Card.Link target=\"_blank\" href={props.florist.url} style={{ color: '#000' }}>\r\n              Learn More\r\n            </Card.Link>\r\n          </Button>\r\n\r\n        </Card.Body>\r\n      </Card>\r\n    </CardDeck>\r\n  )\r\n}\r\n\r\nexport default FloristCard","import React from 'react'\r\nimport FloristCard from './FloristCard';\r\n\r\nconst ListFlorists = (props) => {\r\n    const renderFloristsList = () => {\r\n        const floristCards = props.floristsList.length > 0 ? props.floristsList.map(f => <FloristCard florist={f} key={f.id}/>) : null\r\n        return (floristCards)\r\n    }\r\n    \r\n    return ( \r\n        <div className=\"florist-container\">\r\n            <div className='row'>  \r\n                {renderFloristsList()}\r\n            </div> \r\n        </div> \r\n    )\r\n}\r\n\r\nexport default ListFlorists","import React from 'react'\r\nimport { Navbar, Nav, Container, Button } from 'react-bootstrap'\r\n\r\nconst NavBar = () => {\r\n    return(\r\n        <Navbar variant=\"dark\" style={{ height: '8rem', paddingRight: '15px', backgroundColor: 'white' }}>\r\n            <div className=\"container\">\r\n                <Navbar.Brand href=\"https://www.lantern.co/\">\r\n                    <img src=\"https://mvp-lantern-staging.s3.us-east-2.amazonaws.com/LOGO_Black.png\"\r\n                    width=\"200\" className=\"d-inline-block align-top\" alt=\"Lantern logo\"/>\r\n                </Navbar.Brand>\r\n                <Nav className=\"mr-right\">\r\n                    <span className=\"navigation\">\r\n                        <Nav.Link className=\"nav-link text-center\" href=\"https://www.lantern.co/about\" >About Us</Nav.Link>\r\n                        <Nav.Link className=\"nav-link text-center\" href=\"https://www.lantern.co/howitworks\" >How it works</Nav.Link>\r\n                        <Nav.Link className=\"nav-link text-center\" href=\"https://www.lantern.co/articles\" >Articles</Nav.Link>\r\n                    </span>\r\n                    <span className=\"login\">\r\n                        <Nav.Link className=\"nav-link text-center\" style={{fontWeight: 'bold'}} href=\"https://www.lantern.co/login\" >Log In</Nav.Link>\r\n                        <Button variant=\"warning\" className='btn-lg round' href=\"https://www.lantern.co/register/stepone\">Create Account</Button>\r\n                        <Nav.Link className=\"nav-link text-center\" href=\"https://www.lantern.co/search\" ><img class=\"arrow\" src='https://i.imgur.com/VFYGMMX.png'/></Nav.Link>\r\n                    </span>\r\n                </Nav>\r\n            </div>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React, { Component } from 'react';\r\nimport BrowseFloristsForm from '../components/BrowseFloristsForm'\r\nimport ListFlorists from '../components/ListFlorists'\r\nimport NavBar from '../components/NavBar'\r\n\r\nclass FloristListContainer extends Component {\r\n    state = {\r\n        floristsList : []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchYelpApi()\r\n    }\r\n\r\n    fetchYelpApi = (...args) => {\r\n        let zipcode, latitude, longitude, url;\r\n        if (args.length > 2) {\r\n          [latitude, longitude] = args;\r\n          url = `https://api.yelp.com/v3/businesses/search?term=florist&latitude=${latitude}&longitude=${longitude}`\r\n        } else {\r\n          [zipcode] = args;\r\n          url = `https://api.yelp.com/v3/businesses/search?term=florist&location=${zipcode}&limit=20`\r\n        }\r\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\"\r\n        fetch(proxyurl + url, {\r\n                method: 'GET',\r\n                headers: {\r\n                  'Accept': 'application/json',\r\n                  'Authorization': process.env.REACT_APP_YELP_API_KEY,\r\n                  'Content-Type': 'application/json'\r\n                  }\r\n                }\r\n            )\r\n        .then(resp => resp.json())\r\n        .then((data) => {\r\n            let florists = []\r\n            data.businesses.map((florist) => (\r\n                florists.push(florist)\r\n            ))\r\n            this.setState({\r\n\r\n                floristsList : florists\r\n                \r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <div>\r\n                <NavBar/>\r\n                <BrowseFloristsForm fetchYelpApi={this.fetchYelpApi}/>\r\n                <ListFlorists floristsList={this.state.floristsList}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FloristListContainer;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FloristListContainer from './container/FloristListContainer';\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n      // <header className=\"App-header\">\n        // {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        // {/* <p>\n          // Edit <code>src/App.js</code> and save to reload.\n        // </p>\n        // <a\n        //   className=\"App-link\"\n        //   href=\"https://reactjs.org\"\n        //   target=\"_blank\"\n        //   rel=\"noopener noreferrer\"\n        // >\n        //   Learn React\n        // </a> */}\n      // </header>\n    // </div>\n    <div>\n          <FloristListContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}